const dotenv = require('dotenv');
const fs = require('fs');
const api = require('../dist');

dotenv.config();

const fetcher = new api.Fetcher(process.env.STEAM_API_KEY);

main();

async function main() {
  const { games } = readJSONFile('gameAdapterScript/games.json');

  let indexFileContent = '';

  games.forEach(({ name, appid }) => {
    getStatsForApp(appid, name).then(statsForGame => {
      writeStringToFile(
        `./src/GameAdapter/${appid}_${name}/${name}Adapter.ts`,
        statsForGame
      );
    });
    indexFileContent += `export { ${name}Adapter } from './${appid}_${name}/${name}Adapter';\n`;
  });

  writeStringToFile('./src/GameAdapter/index.ts', indexFileContent);
}

async function getStatsForApp(appid, appName) {
  const safeNameRegex = /[^a-z0-9]|^[0-9]/gi;
  const safeName = s => s.replace(safeNameRegex, '_');
  const schema = await fetcher.getSchemaForGame(appid);

  let content = '// This file is autogenerated by a script\n\n';

  content +=
    `export interface ${appName}Adapter {\n` +
    `  stats: ${appName}Stats;\n` +
    `  achievements: ${appName}Achievements;\n` +
    `}\n\n`;

  content += `interface ${appName}Stats {\n`;
  schema.stats.forEach(({ name, defaultValue, displayName }, i) => {
    name = safeName(name);
    content +=
      `${i !== 0 ? '\n' : ''}  /**\n` +
      `   * ### ${displayName || name}\n` +
      `   * - default value: \`${defaultValue || 0}\`\n` +
      `   */\n` +
      `  ${name}: number;\n`;
  });
  content += `}\n\n`;

  content += `interface ${appName}Achievements {\n`;
  schema.achievements.forEach(
    ({ name, defaultvalue, displayName, hidden, description }, i) => {
      name = safeName(name);
      content +=
        `${i !== 0 ? '\n' : ''}  /**\n` +
        `   * ### ${displayName || name}\n` +
        `   * ${description || ''}\n` +
        `   * - default value: \`${defaultvalue !== 0}\`\n` +
        `   * - hidden: \`${hidden !== 0}\`\n` +
        `   */\n` +
        `  ${name}: boolean;\n`;
    }
  );
  content += `}\n`;

  return content;
}

function writeStringToFile(filename, content) {
  const filepath = filename.substring(0, filename.lastIndexOf('/'));

  if (!fs.existsSync(filepath)) {
    fs.mkdirSync(filepath);
  }
  fs.writeFile(filename, content, function(err) {
    if (err) return console.log(err);
  });
}

function readJSONFile(filename) {
  let raw = fs.readFileSync(filename);
  return JSON.parse(raw);
}
